C51 COMPILER V9.57.0.0   BSP_SENSOR                                                        03/25/2018 22:06:55 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE BSP_SENSOR
OBJECT MODULE PLACED IN .\Objects\bsp_sensor.obj
COMPILER INVOKED BY: D:\Program Files\Keil_v5\C51\BIN\C51.EXE USER\bsp_sensor.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Includ
                    -e) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Listings\bsp_sensor.lst) OBJECT(.\Objects\bsp_sensor.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "SFR_Macro.h"
   3          #include "Function_define.h"
   4          #include "Common.h"
   5          #include "Delay.h"
   6          #include "bsp_sensor.h"
   7          #include "display.h"
   8          
   9          
  10          
  11          uint8_t workMode = 0;
  12          uint8_t lightLevel = 0x80;
  13          uint16_t keyLevel = 0;
  14          
  15          bit T_RH_OK_Flag = 0;
  16          xdata int Temperature;
  17          xdata uint8_t RelativeHumidity;
  18          xdata uint8_t time[8]={0};
  19          extern void display(uint8_t mode);
  20          void bsp_Init()
  21          {
  22   1              P03_PushPull_Mode;
  23   1              P13_OpenDrain_Mode;
  24   1              P14_OpenDrain_Mode;
  25   1              
  26   1              I2CLK = 9;
  27   1              I2CEN = 1;
  28   1      //      I2C_SetValue_Byte(DS3231_ADDR,DS3231_CONTROL,0x18);
  29   1      }
  30          
  31          
  32          void key_ADC()
  33          {
  34   1              Enable_ADC_AIN0;
  35   1              clr_ADCF;
  36   1              set_ADCS;                                                                       // ADC start trig signal
  37   1          while(ADCF == 0);
  38   1              keyLevel = (keyLevel|ADCRH)<<8;
  39   1              keyLevel |= ADCRL;
  40   1              
  41   1              if(keyLevel<0x1000)
  42   1                      workMode = DateMode;
  43   1              else if(keyLevel<0x5000)
  44   1                      workMode = TimeMode;
  45   1              else if(keyLevel<0x9000)
  46   1                      workMode = T_RHMode;
  47   1              else if(keyLevel<0xBD00)
  48   1                      workMode = TimerUpMode1;
  49   1              else if(keyLevel<0xF000)
  50   1                      workMode = TimerUpMode2;
  51   1              else
  52   1                      workMode = NoPressMode;
  53   1      }
  54          
C51 COMPILER V9.57.0.0   BSP_SENSOR                                                        03/25/2018 22:06:55 PAGE 2   

  55          void photoresistor_ADC()
  56          {
  57   1              Enable_ADC_AIN5;
  58   1              clr_ADCF;
  59   1              set_ADCS;                                                                       // ADC start trig signal
  60   1          while(ADCF == 0);
  61   1              lightLevel = ADCRH;
  62   1      }
  63          
  64          
  65          uint8_t I2C_GetValue_Byte(uint8_t address,uint8_t cmd)
  66          {
  67   1              uint8_t value=0;
  68   1              /* 发送START命令 */
  69   1              STA = 1;SI = 0;while(!SI);
  70   1              /* 发送从机地址与读写控制位 */
  71   1              I2DAT = address|I2C_CMD_WR;
  72   1              STA = 0;SI = 0; while(!SI);
  73   1              /* 发送传感器控制命令 */
  74   1              I2DAT = cmd;
  75   1              SI = 0;while(!SI);
  76   1              /* 重新开始I2C传输 */
  77   1              STA = 1;SI = 0;while(!SI);
  78   1              /* 修改为从从机读取数据模式 */
  79   1              I2DAT = address|I2C_CMD_RD;
  80   1              STA = 0;SI = 0;while(!SI);              
  81   1              /* 获取1个字节数据，并NACK相应 */
  82   1              AA = 0;SI = 0;while(!SI);
  83   1              value = I2DAT;
  84   1              /* 发送停止信号 */
  85   1              STO = 1;SI = 0;while(STO);
  86   1              return value;
  87   1      }
  88          
  89          void I2C_SetValue_Byte(uint8_t address,uint8_t cmd,uint8_t dat)
  90          {
  91   1              uint8_t value=0;
  92   1              /* 发送START命令 */
  93   1              STA = 1;SI = 0;while(!SI);
  94   1              /* 发送从机地址与读写控制位 */
  95   1              I2DAT = address|I2C_CMD_WR;
  96   1              STA = 0;SI = 0; while(!SI);
  97   1              /* 发送传感器控制命令 */
  98   1              I2DAT = cmd;
  99   1              SI = 0;while(!SI);
 100   1              I2DAT = dat;
 101   1              SI = 0;while(!SI);
 102   1              /* 发送停止信号 */
 103   1              STO = 1;SI = 0;while(STO);
 104   1      }
 105          
 106          
 107          uint16_t I2C_GetValue_Word(uint8_t address,uint8_t cmd)
 108          {
 109   1              uint16_t value = 0;
 110   1              /* 发送START命令 */
 111   1              STA = 1;SI = 0;while(!SI);
 112   1              /* 发送从机地址与读写控制位 */
 113   1              I2DAT = address|I2C_CMD_WR;
 114   1              STA = 0;SI = 0;while(!SI);
 115   1              /* 发送传感器控制命令 */
 116   1              I2DAT = cmd;
C51 COMPILER V9.57.0.0   BSP_SENSOR                                                        03/25/2018 22:06:55 PAGE 3   

 117   1              SI = 0;while(!SI);
 118   1              /* 重新开始I2C传输 */
 119   1              STA = 1;SI = 0;while(!SI);
 120   1              /* 修改为从从机读取数据模式 */
 121   1              I2DAT = address|I2C_CMD_RD;
 122   1              STA = 0;SI = 0;
 123   1              while(!SI) ;
 124   1              /* 获取1个字节数据，并ACK相应 */
 125   1              AA = 1;SI = 0;
 126   1              while(!SI) ;
 127   1              value = (value|I2DAT)<<8;       
 128   1              /* 获取1个字节数据，并NACK相应 */
 129   1              AA = 0;SI = 0;while(!SI);
 130   1              value |= I2DAT;
 131   1              /* 发送停止信号 */
 132   1              STO = 1;SI = 0;while(STO);
 133   1              return value;
 134   1      }
 135          
 136          
 137          void SI7021_Measure()
 138          {
 139   1              uint32_t T_Value,RH_Value;
 140   1              T_Value = I2C_GetValue_Word(SI7021_ADDR,SI7021_CMD_MT);
 141   1              RH_Value = I2C_GetValue_Word(SI7021_ADDR,SI7021_CMD_MRH);
 142   1              
 143   1              Temperature = (17572*T_Value)/65536-4685;
 144   1              Temperature = Temperature/10;
 145   1              RelativeHumidity = ((RH_Value*125)/65536)-6;
 146   1      }
 147          
 148          uint8_t HEX2BCD(uint8_t dat)
 149          {
 150   1              uint8_t temp;
 151   1              temp = (dat/10)<<4;
 152   1              temp = temp|(dat%10);
 153   1              return temp;
 154   1      }
 155          
 156          void DS3231_SetTime(uint8_t sec,uint8_t min,uint8_t hour,uint8_t day,uint8_t month,uint8_t year,uint8_t we
             -ek)
 157          {
 158   1              I2C_SetValue_Byte(DS3231_ADDR,DS3231_SECOND,HEX2BCD(sec));
 159   1              I2C_SetValue_Byte(DS3231_ADDR,DS3231_MINUTE,HEX2BCD(min));
 160   1              I2C_SetValue_Byte(DS3231_ADDR,DS3231_HOUR,HEX2BCD(hour));
 161   1              I2C_SetValue_Byte(DS3231_ADDR,DS3231_DAY,HEX2BCD(day));
 162   1              I2C_SetValue_Byte(DS3231_ADDR,DS3231_MONTH,HEX2BCD(month));
 163   1              I2C_SetValue_Byte(DS3231_ADDR,DS3231_YEAR,HEX2BCD(year));
 164   1              I2C_SetValue_Byte(DS3231_ADDR,DS3231_WEEK,week);
 165   1      }
 166          
 167          void DS3231_GetTime()
 168          {
 169   1              time[0] = I2C_GetValue_Byte(DS3231_ADDR,DS3231_SECOND);
 170   1              time[1] = I2C_GetValue_Byte(DS3231_ADDR,DS3231_MINUTE);
 171   1              time[2] = I2C_GetValue_Byte(DS3231_ADDR,DS3231_HOUR);
 172   1      //      time[3] = I2C_GetValue_Byte(DS3231_ADDR,DS3231_DAY);
 173   1      //      time[4] = I2C_GetValue_Byte(DS3231_ADDR,DS3231_MONTH);
 174   1      //      time[5] = I2C_GetValue_Byte(DS3231_ADDR,DS3231_YEAR);
 175   1      //      time[6] = I2C_GetValue_Byte(DS3231_ADDR,DS3231_WEEK);
 176   1      }
 177          
C51 COMPILER V9.57.0.0   BSP_SENSOR                                                        03/25/2018 22:06:55 PAGE 4   

 178          void DS3231_GetDate()
 179          {
 180   1              time[3] = I2C_GetValue_Byte(DS3231_ADDR,DS3231_DAY);
 181   1              time[4] = I2C_GetValue_Byte(DS3231_ADDR,DS3231_MONTH);
 182   1              time[5] = I2C_GetValue_Byte(DS3231_ADDR,DS3231_YEAR);
 183   1              time[6] = I2C_GetValue_Byte(DS3231_ADDR,DS3231_WEEK);
 184   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    604    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
